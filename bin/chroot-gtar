#!/bin/sh
#
# Run `gtar` in a chroot to guard against symlink/hardlink break outs.
#
# Limitation: This doesn't guard against multiple concurrent runs in the same
# or child/parent dirs.
#

if [[ -n "$TRACE" ]]; then
    export PS4='${BASH_SOURCE}:${LINENO}: '
    set -o xtrace
fi
set -o errexit
set -o pipefail

SCRIPT_NAME=chroot-gtar

function fatal
{
    echo "$0: fatal error: $*" >&2
    exit 1
}

function onexit
{
    if [[ -n "$CHROOTDIR" ]]; then
        for path in $TO_UMOUNT; do
            [[ -e "$path" ]] && umount $path
        done
        for path in $TO_REMOVE; do
            [[ -e "$path" ]] && rm -rf $path
        done
    fi
    exit $1
}

function usage
{
    echo "usage: ${SCRIPT_NAME} -r CHROOTDIR -C GTARDIR -t TARBALL [-z COMPRESION] [-m TARMETHOD]" >&2
    echo "" >&2
    echo "'CHROOTDIR' is the base dir of the chroot. 'GTARDIR' is a path" >&2
    echo "relative to CHROOTDIR that is passed to gtar as '-C GTARDIR'." >&2
    echo "It is suggested a GTARDIR other than '.' is always used to avoid" >&2
    echo "conflict with the '$CHROOTDIR/lib' and '$CHROOTDIR/chroot-tools-$PID'" >&2
    echo "support dirs created for the chroot environment." >&2
    echo "" >&2
    echo "'TARBALL' is a relative path from the 'CHROOTDIR' - i.e. accessible in chroot." >&2
    echo "" >&2
    echo "Optional 'COMPRESSION' is one of 'none', 'gzip', 'bzip2' or 'xv'." >&2
    echo "Optional 'TARMETHOD' of 'create' or 'extract' - defaults to 'extract'." >&2
    echo "" >&2
    echo "example:" >&2
    echo "    ./${SCRIPT_NAME} -r /zones/foo -C extracted -t /var/archive.tar.xz -z xz -x" >&2
}



#---- mainline

CHROOTDIR=
GTARDIR=
TARBALL=
UNCOMPRESSOPT=
TARMETHOD=x

while getopts ":hr:C:t:z:m:" opt; do
  case $opt in
    C)
        GTARDIR=$OPTARG
        ;;
    m)
        case $OPTARG in
            extract)
                ;;
            create)
                TARMETHOD=c
                ;;
            *)
                fatal "unknown tar method: $OPTARG"
        esac
        ;;
    r)
        CHROOTDIR=$OPTARG
        ;;
    t)
        TARBALL=$OPTARG
        ;;
    z)
        case $OPTARG in
            xz)
                UNCOMPRESSOPT=J
                ;;
            none|gzip|bzip2)
                ;;
            *)
                fatal "unknown compression: $OPTARG"
        esac
        ;;
    [h|\?])
        usage
        fatal "Invalid option: -$OPTARG"
        ;;
    :)
        usage
        fatal "Option -$OPTARG requires an argument."
        ;;
  esac
done

# Anything left over is passed to gtar as is.
shift $((OPTIND-1))
GTAR_EXTRA_OPTS=$@

if [[ -z "$CHROOTDIR" ]] || [[ -z "$GTARDIR" ]] || [[ -z "$TARBALL" ]]; then
    usage
    exit 1
fi

if [[ ! -f "$CHROOTDIR/$TARBALL" ]]; then
    fatal "TARBALL does not exist: $CHROOTDIR/$TARBALL"
    exit 1
fi


trap 'onexit $?' EXIT

TO_UMOUNT=
TO_REMOVE=
CHROOTBIN=chroot-bin-$$
BINDIR=$CHROOTDIR/$CHROOTBIN
LIBDIR=$CHROOTDIR/lib
TO_REMOVE="$TO_REMOVE $BINDIR $LIBDIR"

if [[ -e $LIBDIR ]]; then
    fatal "conflict: $LIBDIR exists"
fi
mkdir -p $LIBDIR

# Copy commands (and their library dependencies) into the chroot.
rm -rf $BINDIR
mkdir $BINDIR
CMDS="gtar"
CMDS="$CMDS cat gzip bzip2 xz"
CMDS="$CMDS bash rm grep sed tee"
for cmd in $CMDS; do
    cp "$(which $cmd)" $BINDIR/
done

mkdir -p $LIBDIR
libs="/lib/ld.so.1
    $(for cmd in $CMDS; do ldd "$(which $cmd)"; done \
        | awk '{print $3}' | sort | uniq)
    "
for lib in $libs; do
    cp "$lib" $LIBDIR/
done

# Setup minimum fake filesystem.
TO_UMOUNT="$TO_UMOUNT $CHROOTDIR/proc $CHROOTDIR/dev/fd"
TO_REMOVE="$TO_REMOVE $CHROOTDIR/proc $CHROOTDIR/dev/fd"
mkdir -p $CHROOTDIR/proc
mount -F proc proc $CHROOTDIR/proc
[[ ! -e $CHROOTDIR/dev ]] && TO_REMOVE="$TO_REMOVE $CHROOTDIR/dev"
mkdir -p $CHROOTDIR/dev/fd
mount -F fd fd $CHROOTDIR/dev/fd

# Run chroot gtar command.
TRACE=$TRACE LC_ALL=C PATH=/$CHROOTBIN:$PATH /usr/sbin/chroot $CHROOTDIR \
    /$CHROOTBIN/gtar -C "$GTARDIR" -${TARMETHOD}${UNCOMPRESSOPT}f "$TARBALL" $GTAR_EXTRA_OPTS
